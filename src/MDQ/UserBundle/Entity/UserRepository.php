<?php

namespace MDQ\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	public function getUsers($type, $compte, $sexe, $departement, $age,$last_login, $role, $nbP, $triUser, $triStats, $sens, $nbdeU, $nbmin)
	{
 		$qb = $this->createQueryBuilder('a');	
 		$qb->where('a.id>0'); //c'est bateau, mais après ça me permet de mettre uniquement des andWhere et d'éviter trop de conditions.
 		
 		if($sexe!=2){$qb->andWhere('a.sexe='.$sexe);}
 		if($type!=2){$qb->andWhere('a.bot='.$type);}
 		if($compte==0){$qb->andWhere('a.supprime=0')
				  ->andWhere('a.locked=0');}
		elseif($compte==1){$qb->andWhere('a.supprime=1');}
		elseif($compte==2){$qb->andWhere('a.locked=1');}
 		if($nbP!="none" || $triStats!="none"){$qb->leftJoin('a.scUser','sc');}
		if($nbP!="none"){$qb->andWhere('sc.nbPtot'.$nbP);}
		if($triUser=="last_login"){$triUser="lastLogin";}
		if($triStats=="none"){$qb->orderBy('a.'.$triUser, $sens);}
		else{
		      if($triStats=="totMed" || $triStats=="mq1"){
		      $qb->leftJoin('sc.medailles','med');
		      $qb->orderBy('med.'.$triStats, $sens);
		      }
		      else{$qb->orderBy('sc.'.$triStats, $sens);}
		 }
		

		$qb->setFirstResult($nbmin-1);
		if($nbdeU!=0) {$qb->setMaxResults($nbdeU);}
		return $qb->getQuery()->getResult();
	}
	public function getBots($nbBots,$nbBotsSelect,$botsSelects2)
	{
		// tirage au sort des id
		$tabdesNum=[]; $nbmax=$nbBotsSelect-1;
		for($i=0;$i<$nbBots;$i++)
		{
			while (!isset($nbtire) OR in_array($nbtire, $tabdesNum)===true)
			{
			$nbtire=mt_rand(0,$nbmax);				
			}		
			$tabdesNum[$i]=$nbtire;
		}
		 $qb = $this->createQueryBuilder('u')
			->select('u');
			for($i=0;$i<$nbBots;$i++)
			{
				$qb->orWhere('u.id = :iduser'.$i)
				->setParameter('iduser'.$i, $botsSelects2[$tabdesNum[$i]]);
			}


		return $qb->getQuery()
				->getResult();
	}
	public function recupNbUser($date, $nbjr)
	{
		if($date!==0){
			$xday=$nbjr-1;
			$date_min=$date->format('Y-m-d').' 00:00:00';
			$date_min= date("Y-m-d", strtotime($date_min." -".$xday." day"));
			$date_max=$date->format('Y-m-d').' 23:59:59';			
		}
		else{
			$date_min='2010-01-01 00:00:00';
			$date_max='2100-12-31 23:59:59';			
		}
		$qb = $this->createQueryBuilder('u')
				->select('COUNT(u)')
				->where('u.lastLogin >= :date_min')
				  ->setParameter('date_min', $date_min)
				  ->andWhere('u.lastLogin <= :date_max')
				  ->setParameter('date_max', $date_max)
				  ->andWhere('u.bot = 0');				
		return $qb->getQuery()->getSingleScalarResult();	
	}
	public function recupNbInscrit($date, $nbjr)
	{
		if($date!==0){
			$xday=$nbjr-1;
			$date_min=$date->format('Y-m-d');
			$date_min= date("Y-m-d", strtotime($date_min." -".$xday." day"));
			$date_max=$date->format('Y-m-d');
			
		}
		else{
			$date_min='2010-01-01';
			$date_max='2100-12-31';			
		}
		$qb = $this->createQueryBuilder('u')
				->select('COUNT(u)')
				->where('u.datecreate >= :date_min')
				  ->setParameter('date_min', $date_min)
				  ->andWhere('u.datecreate <= :date_max')
				  ->setParameter('date_max', $date_max)
				  ->andWhere('u.bot = 0');				
		return $qb->getQuery()->getSingleScalarResult();	
	}
}
